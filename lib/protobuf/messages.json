{
  "options": {
    "java_package": "coop.rchain.models",
    "(scalapb.options).import": "coop.rchain.models.ParMapTypeMapper.parMapEMapTypeMapper"
  },
  "nested": {
    "coop": {
      "nested": {
        "rchain": {
          "nested": {
            "casper": {
              "nested": {
                "protocol": {
                  "options": {
                    "(scalapb.options).package_name": "coop.rchain.casper.protocol",
                    "(scalapb.options).flat_package": true
                  },
                  "nested": {
                    "DeployService": {
                      "methods": {
                        "DoDeploy": {
                          "requestType": "DeployData",
                          "responseType": "DeployServiceResponse"
                        },
                        "addBlock": {
                          "requestType": "BlockMessage",
                          "responseType": "DeployServiceResponse"
                        },
                        "createBlock": {
                          "requestType": "google.protobuf.Empty",
                          "responseType": "DeployServiceResponse"
                        },
                        "showBlock": {
                          "requestType": "BlockQuery",
                          "responseType": "BlockQueryResponse"
                        },
                        "showMainChain": {
                          "requestType": "BlocksQuery",
                          "responseType": "BlockInfoWithoutTuplespace",
                          "responseStream": true
                        },
                        "showBlocks": {
                          "requestType": "BlocksQuery",
                          "responseType": "BlockInfoWithoutTuplespace",
                          "responseStream": true
                        },
                        "listenForDataAtName": {
                          "requestType": "DataAtNameQuery",
                          "responseType": "ListeningNameDataResponse"
                        },
                        "listenForContinuationAtName": {
                          "requestType": "ContinuationAtNameQuery",
                          "responseType": "ListeningNameContinuationResponse"
                        }
                      }
                    },
                    "PhloLimit": {
                      "fields": {
                        "value": {
                          "type": "int64",
                          "id": 1
                        }
                      }
                    },
                    "PhloPrice": {
                      "fields": {
                        "value": {
                          "type": "int64",
                          "id": 1
                        }
                      }
                    },
                    "DeployData": {
                      "fields": {
                        "user": {
                          "type": "bytes",
                          "id": 1
                        },
                        "term": {
                          "type": "string",
                          "id": 2
                        },
                        "timestamp": {
                          "type": "int64",
                          "id": 3
                        },
                        "sig": {
                          "type": "bytes",
                          "id": 4
                        },
                        "sigAlgorithm": {
                          "type": "string",
                          "id": 5
                        },
                        "from": {
                          "type": "string",
                          "id": 6
                        },
                        "phloPrice": {
                          "type": "PhloPrice",
                          "id": 7
                        },
                        "phloLimit": {
                          "type": "PhloLimit",
                          "id": 8
                        },
                        "nonce": {
                          "type": "int32",
                          "id": 9
                        }
                      }
                    },
                    "BlockRequest": {
                      "fields": {
                        "base16Hash": {
                          "type": "string",
                          "id": 1
                        },
                        "hash": {
                          "type": "bytes",
                          "id": 2
                        }
                      }
                    },
                    "BlockQuery": {
                      "fields": {
                        "hash": {
                          "type": "string",
                          "id": 1
                        }
                      }
                    },
                    "BlocksQuery": {
                      "fields": {
                        "depth": {
                          "type": "int32",
                          "id": 1
                        }
                      }
                    },
                    "DataAtNameQuery": {
                      "fields": {
                        "depth": {
                          "type": "int32",
                          "id": 1
                        },
                        "name": {
                          "type": "Par",
                          "id": 2
                        }
                      }
                    },
                    "ContinuationAtNameQuery": {
                      "fields": {
                        "depth": {
                          "type": "int32",
                          "id": 1
                        },
                        "names": {
                          "rule": "repeated",
                          "type": "Par",
                          "id": 2
                        }
                      }
                    },
                    "DeployServiceResponse": {
                      "fields": {
                        "success": {
                          "type": "bool",
                          "id": 1
                        },
                        "message": {
                          "type": "string",
                          "id": 2
                        }
                      }
                    },
                    "MaybeBlockMessage": {
                      "fields": {
                        "block": {
                          "type": "BlockMessage",
                          "id": 1
                        }
                      }
                    },
                    "BlockQueryResponse": {
                      "fields": {
                        "status": {
                          "type": "string",
                          "id": 1
                        },
                        "blockInfo": {
                          "type": "BlockInfo",
                          "id": 2
                        }
                      }
                    },
                    "ListeningNameDataResponse": {
                      "fields": {
                        "status": {
                          "type": "string",
                          "id": 1
                        },
                        "blockResults": {
                          "rule": "repeated",
                          "type": "DataWithBlockInfo",
                          "id": 2
                        },
                        "length": {
                          "type": "int32",
                          "id": 3
                        }
                      }
                    },
                    "ListeningNameContinuationResponse": {
                      "fields": {
                        "status": {
                          "type": "string",
                          "id": 1
                        },
                        "blockResults": {
                          "rule": "repeated",
                          "type": "ContinuationsWithBlockInfo",
                          "id": 2
                        },
                        "length": {
                          "type": "int32",
                          "id": 3
                        }
                      }
                    },
                    "DataWithBlockInfo": {
                      "fields": {
                        "postBlockData": {
                          "rule": "repeated",
                          "type": "Par",
                          "id": 1
                        },
                        "block": {
                          "type": "BlockInfoWithoutTuplespace",
                          "id": 2
                        }
                      }
                    },
                    "ContinuationsWithBlockInfo": {
                      "fields": {
                        "postBlockContinuations": {
                          "rule": "repeated",
                          "type": "WaitingContinuationInfo",
                          "id": 1
                        },
                        "block": {
                          "type": "BlockInfoWithoutTuplespace",
                          "id": 2
                        }
                      }
                    },
                    "WaitingContinuationInfo": {
                      "fields": {
                        "postBlockPatterns": {
                          "rule": "repeated",
                          "type": "BindPattern",
                          "id": 1
                        },
                        "postBlockContinuation": {
                          "type": "Par",
                          "id": 2
                        }
                      }
                    },
                    "BlockInfoWithoutTuplespace": {
                      "fields": {
                        "blockHash": {
                          "type": "string",
                          "id": 1
                        },
                        "blockSize": {
                          "type": "string",
                          "id": 2
                        },
                        "blockNumber": {
                          "type": "int64",
                          "id": 3
                        },
                        "version": {
                          "type": "int64",
                          "id": 4
                        },
                        "deployCount": {
                          "type": "int32",
                          "id": 5
                        },
                        "tupleSpaceHash": {
                          "type": "string",
                          "id": 6
                        },
                        "timestamp": {
                          "type": "int64",
                          "id": 7
                        },
                        "faultTolerance": {
                          "type": "float",
                          "id": 8
                        },
                        "mainParentHash": {
                          "type": "string",
                          "id": 9
                        },
                        "parentsHashList": {
                          "rule": "repeated",
                          "type": "string",
                          "id": 10
                        },
                        "sender": {
                          "type": "string",
                          "id": 11
                        }
                      }
                    },
                    "BlockInfo": {
                      "fields": {
                        "blockHash": {
                          "type": "string",
                          "id": 1
                        },
                        "blockSize": {
                          "type": "string",
                          "id": 2
                        },
                        "blockNumber": {
                          "type": "int64",
                          "id": 3
                        },
                        "version": {
                          "type": "int64",
                          "id": 4
                        },
                        "deployCount": {
                          "type": "int32",
                          "id": 5
                        },
                        "tupleSpaceHash": {
                          "type": "string",
                          "id": 6
                        },
                        "tupleSpaceDump": {
                          "type": "string",
                          "id": 7
                        },
                        "timestamp": {
                          "type": "int64",
                          "id": 8
                        },
                        "faultTolerance": {
                          "type": "float",
                          "id": 9
                        },
                        "mainParentHash": {
                          "type": "string",
                          "id": 10
                        },
                        "parentsHashList": {
                          "rule": "repeated",
                          "type": "string",
                          "id": 11
                        },
                        "sender": {
                          "type": "string",
                          "id": 12
                        },
                        "shardId": {
                          "type": "string",
                          "id": 13
                        }
                      }
                    },
                    "ApprovedBlockCandidate": {
                      "fields": {
                        "block": {
                          "type": "BlockMessage",
                          "id": 1
                        },
                        "requiredSigs": {
                          "type": "int32",
                          "id": 2
                        }
                      }
                    },
                    "UnapprovedBlock": {
                      "fields": {
                        "candidate": {
                          "type": "ApprovedBlockCandidate",
                          "id": 1
                        },
                        "timestamp": {
                          "type": "int64",
                          "id": 2
                        },
                        "duration": {
                          "type": "int64",
                          "id": 3
                        }
                      }
                    },
                    "Signature": {
                      "fields": {
                        "publicKey": {
                          "type": "bytes",
                          "id": 1
                        },
                        "algorithm": {
                          "type": "string",
                          "id": 2
                        },
                        "sig": {
                          "type": "bytes",
                          "id": 3
                        }
                      }
                    },
                    "BlockApproval": {
                      "fields": {
                        "candidate": {
                          "type": "ApprovedBlockCandidate",
                          "id": 1
                        },
                        "sig": {
                          "type": "Signature",
                          "id": 2
                        }
                      }
                    },
                    "ApprovedBlock": {
                      "fields": {
                        "candidate": {
                          "type": "ApprovedBlockCandidate",
                          "id": 1
                        },
                        "sigs": {
                          "rule": "repeated",
                          "type": "Signature",
                          "id": 2
                        }
                      }
                    },
                    "ApprovedBlockRequest": {
                      "fields": {
                        "identifier": {
                          "type": "string",
                          "id": 1
                        }
                      }
                    },
                    "NoApprovedBlockAvailable": {
                      "fields": {
                        "identifier": {
                          "type": "string",
                          "id": 1
                        },
                        "nodeIdentifer": {
                          "type": "string",
                          "id": 2
                        }
                      }
                    },
                    "BlockMessage": {
                      "fields": {
                        "blockHash": {
                          "type": "bytes",
                          "id": 1
                        },
                        "header": {
                          "type": "Header",
                          "id": 2
                        },
                        "body": {
                          "type": "Body",
                          "id": 3
                        },
                        "justifications": {
                          "rule": "repeated",
                          "type": "Justification",
                          "id": 4
                        },
                        "sender": {
                          "type": "bytes",
                          "id": 5
                        },
                        "seqNum": {
                          "type": "int32",
                          "id": 6
                        },
                        "sig": {
                          "type": "bytes",
                          "id": 7
                        },
                        "sigAlgorithm": {
                          "type": "string",
                          "id": 8
                        },
                        "shardId": {
                          "type": "string",
                          "id": 9
                        },
                        "extraBytes": {
                          "type": "bytes",
                          "id": 10
                        }
                      }
                    },
                    "Header": {
                      "fields": {
                        "parentsHashList": {
                          "rule": "repeated",
                          "type": "bytes",
                          "id": 1
                        },
                        "postStateHash": {
                          "type": "bytes",
                          "id": 2
                        },
                        "deploysHash": {
                          "type": "bytes",
                          "id": 3
                        },
                        "timestamp": {
                          "type": "int64",
                          "id": 5
                        },
                        "version": {
                          "type": "int64",
                          "id": 6
                        },
                        "deployCount": {
                          "type": "int32",
                          "id": 7
                        },
                        "extraBytes": {
                          "type": "bytes",
                          "id": 8
                        }
                      }
                    },
                    "ProcessedDeploy": {
                      "fields": {
                        "deploy": {
                          "type": "Deploy",
                          "id": 1
                        },
                        "cost": {
                          "type": "PCost",
                          "id": 2
                        },
                        "log": {
                          "rule": "repeated",
                          "type": "Event",
                          "id": 3
                        },
                        "errored": {
                          "type": "bool",
                          "id": 4
                        }
                      }
                    },
                    "Body": {
                      "fields": {
                        "postState": {
                          "type": "RChainState",
                          "id": 1
                        },
                        "deploys": {
                          "rule": "repeated",
                          "type": "ProcessedDeploy",
                          "id": 2
                        },
                        "extraBytes": {
                          "type": "bytes",
                          "id": 3
                        }
                      }
                    },
                    "Justification": {
                      "fields": {
                        "validator": {
                          "type": "bytes",
                          "id": 1
                        },
                        "latestBlockHash": {
                          "type": "bytes",
                          "id": 2
                        }
                      }
                    },
                    "RChainState": {
                      "fields": {
                        "tuplespace": {
                          "type": "bytes",
                          "id": 1
                        },
                        "bonds": {
                          "rule": "repeated",
                          "type": "Bond",
                          "id": 2
                        },
                        "blockNumber": {
                          "type": "int64",
                          "id": 3
                        }
                      }
                    },
                    "Deploy": {
                      "fields": {
                        "term": {
                          "type": "Par",
                          "id": 1
                        },
                        "raw": {
                          "type": "DeployData",
                          "id": 2
                        }
                      }
                    },
                    "Event": {
                      "oneofs": {
                        "event_instance": {
                          "oneof": [
                            "produce",
                            "consume",
                            "comm"
                          ]
                        }
                      },
                      "fields": {
                        "produce": {
                          "type": "ProduceEvent",
                          "id": 1
                        },
                        "consume": {
                          "type": "ConsumeEvent",
                          "id": 2
                        },
                        "comm": {
                          "type": "CommEvent",
                          "id": 3
                        }
                      }
                    },
                    "ProduceEvent": {
                      "fields": {
                        "channelsHash": {
                          "type": "bytes",
                          "id": 1
                        },
                        "hash": {
                          "type": "bytes",
                          "id": 2
                        }
                      }
                    },
                    "ConsumeEvent": {
                      "fields": {
                        "channelsHash": {
                          "type": "bytes",
                          "id": 1
                        },
                        "hash": {
                          "type": "bytes",
                          "id": 2
                        }
                      }
                    },
                    "CommEvent": {
                      "fields": {
                        "consume": {
                          "type": "ConsumeEvent",
                          "id": 1
                        },
                        "produces": {
                          "rule": "repeated",
                          "type": "ProduceEvent",
                          "id": 2
                        }
                      }
                    },
                    "Bond": {
                      "fields": {
                        "validator": {
                          "type": "bytes",
                          "id": 1
                        },
                        "stake": {
                          "type": "int64",
                          "id": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "google": {
      "nested": {
        "protobuf": {
          "nested": {
            "Empty": {
              "fields": {}
            }
          }
        }
      }
    },
    "Par": {
      "fields": {
        "sends": {
          "rule": "repeated",
          "type": "Send",
          "id": 1
        },
        "receives": {
          "rule": "repeated",
          "type": "Receive",
          "id": 2
        },
        "news": {
          "rule": "repeated",
          "type": "New",
          "id": 4
        },
        "exprs": {
          "rule": "repeated",
          "type": "Expr",
          "id": 5
        },
        "matches": {
          "rule": "repeated",
          "type": "Match",
          "id": 6
        },
        "ids": {
          "rule": "repeated",
          "type": "GPrivate",
          "id": 7
        },
        "bundles": {
          "rule": "repeated",
          "type": "Bundle",
          "id": 11
        },
        "connectives": {
          "rule": "repeated",
          "type": "Connective",
          "id": 8
        },
        "locallyFree": {
          "type": "bytes",
          "id": 9,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 10
        }
      }
    },
    "TaggedContinuation": {
      "oneofs": {
        "tagged_cont": {
          "oneof": [
            "par_body",
            "scala_body_ref"
          ]
        }
      },
      "fields": {
        "par_body": {
          "type": "ParWithRandom",
          "id": 1
        },
        "scala_body_ref": {
          "type": "int64",
          "id": 2
        }
      }
    },
    "ParWithRandom": {
      "fields": {
        "body": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "randomState": {
          "type": "bytes",
          "id": 2,
          "options": {
            "(scalapb.field).type": "coop.rchain.crypto.hash.Blake2b512Random"
          }
        }
      }
    },
    "PCost": {
      "fields": {
        "iterations": {
          "type": "int32",
          "id": 1
        },
        "cost": {
          "type": "uint64",
          "id": 2
        }
      }
    },
    "ListParWithRandom": {
      "fields": {
        "pars": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "randomState": {
          "type": "bytes",
          "id": 2,
          "options": {
            "(scalapb.field).type": "coop.rchain.crypto.hash.Blake2b512Random"
          }
        }
      }
    },
    "ListParWithRandomAndPhlos": {
      "fields": {
        "pars": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "randomState": {
          "type": "bytes",
          "id": 2,
          "options": {
            "(scalapb.field).type": "coop.rchain.crypto.hash.Blake2b512Random"
          }
        },
        "cost": {
          "type": "uint64",
          "id": 3
        }
      }
    },
    "Var": {
      "oneofs": {
        "var_instance": {
          "oneof": [
            "bound_var",
            "free_var",
            "wildcard"
          ]
        }
      },
      "fields": {
        "bound_var": {
          "type": "sint32",
          "id": 1
        },
        "free_var": {
          "type": "sint32",
          "id": 2
        },
        "wildcard": {
          "type": "WildcardMsg",
          "id": 3
        }
      },
      "nested": {
        "WildcardMsg": {
          "fields": {}
        }
      }
    },
    "Bundle": {
      "fields": {
        "body": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "writeFlag": {
          "type": "bool",
          "id": 2
        },
        "readFlag": {
          "type": "bool",
          "id": 3
        }
      }
    },
    "Send": {
      "fields": {
        "chan": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "data": {
          "rule": "repeated",
          "type": "Par",
          "id": 2
        },
        "persistent": {
          "type": "bool",
          "id": 3
        },
        "locallyFree": {
          "type": "bytes",
          "id": 5,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 6
        }
      }
    },
    "ReceiveBind": {
      "fields": {
        "patterns": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "source": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "remainder": {
          "type": "Var",
          "id": 3
        },
        "freeCount": {
          "type": "int32",
          "id": 4
        }
      }
    },
    "BindPattern": {
      "fields": {
        "patterns": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "remainder": {
          "type": "Var",
          "id": 2
        },
        "freeCount": {
          "type": "int32",
          "id": 3
        }
      }
    },
    "ListBindPatterns": {
      "fields": {
        "patterns": {
          "rule": "repeated",
          "type": "BindPattern",
          "id": 1
        }
      }
    },
    "Receive": {
      "fields": {
        "binds": {
          "rule": "repeated",
          "type": "ReceiveBind",
          "id": 1
        },
        "body": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "persistent": {
          "type": "bool",
          "id": 3
        },
        "bindCount": {
          "type": "int32",
          "id": 4
        },
        "locallyFree": {
          "type": "bytes",
          "id": 6,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 7
        }
      }
    },
    "New": {
      "fields": {
        "bindCount": {
          "type": "sint32",
          "id": 1
        },
        "p": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "uri": {
          "rule": "repeated",
          "type": "string",
          "id": 3
        },
        "locallyFree": {
          "type": "bytes",
          "id": 4,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        }
      }
    },
    "MatchCase": {
      "fields": {
        "pattern": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "source": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "freeCount": {
          "type": "int32",
          "id": 3
        }
      }
    },
    "Match": {
      "fields": {
        "target": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "cases": {
          "rule": "repeated",
          "type": "MatchCase",
          "id": 2
        },
        "locallyFree": {
          "type": "bytes",
          "id": 4,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 5
        }
      }
    },
    "Expr": {
      "oneofs": {
        "expr_instance": {
          "oneof": [
            "g_bool",
            "g_int",
            "g_string",
            "g_uri",
            "g_byte_array",
            "e_not_body",
            "e_neg_body",
            "e_mult_body",
            "e_div_body",
            "e_plus_body",
            "e_minus_body",
            "e_lt_body",
            "e_lte_body",
            "e_gt_body",
            "e_gte_body",
            "e_eq_body",
            "e_neq_body",
            "e_and_body",
            "e_or_body",
            "e_var_body",
            "e_list_body",
            "e_tuple_body",
            "e_set_body",
            "e_map_body",
            "e_method_body",
            "e_matches_body",
            "e_percent_percent_body",
            "e_plus_plus_body",
            "e_minus_minus_body"
          ]
        }
      },
      "fields": {
        "g_bool": {
          "type": "bool",
          "id": 1
        },
        "g_int": {
          "type": "sint64",
          "id": 2
        },
        "g_string": {
          "type": "string",
          "id": 3
        },
        "g_uri": {
          "type": "string",
          "id": 4
        },
        "g_byte_array": {
          "type": "bytes",
          "id": 25
        },
        "e_not_body": {
          "type": "ENot",
          "id": 5
        },
        "e_neg_body": {
          "type": "ENeg",
          "id": 6
        },
        "e_mult_body": {
          "type": "EMult",
          "id": 7
        },
        "e_div_body": {
          "type": "EDiv",
          "id": 8
        },
        "e_plus_body": {
          "type": "EPlus",
          "id": 9
        },
        "e_minus_body": {
          "type": "EMinus",
          "id": 10
        },
        "e_lt_body": {
          "type": "ELt",
          "id": 11
        },
        "e_lte_body": {
          "type": "ELte",
          "id": 12
        },
        "e_gt_body": {
          "type": "EGt",
          "id": 13
        },
        "e_gte_body": {
          "type": "EGte",
          "id": 14
        },
        "e_eq_body": {
          "type": "EEq",
          "id": 15
        },
        "e_neq_body": {
          "type": "ENeq",
          "id": 16
        },
        "e_and_body": {
          "type": "EAnd",
          "id": 17
        },
        "e_or_body": {
          "type": "EOr",
          "id": 18
        },
        "e_var_body": {
          "type": "EVar",
          "id": 19
        },
        "e_list_body": {
          "type": "EList",
          "id": 20
        },
        "e_tuple_body": {
          "type": "ETuple",
          "id": 21
        },
        "e_set_body": {
          "type": "ESet",
          "id": 22,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.ParSet"
          }
        },
        "e_map_body": {
          "type": "EMap",
          "id": 23,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.ParMap"
          }
        },
        "e_method_body": {
          "type": "EMethod",
          "id": 24
        },
        "e_matches_body": {
          "type": "EMatches",
          "id": 27
        },
        "e_percent_percent_body": {
          "type": "EPercentPercent",
          "id": 28
        },
        "e_plus_plus_body": {
          "type": "EPlusPlus",
          "id": 29
        },
        "e_minus_minus_body": {
          "type": "EMinusMinus",
          "id": 30
        }
      }
    },
    "EList": {
      "fields": {
        "ps": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "locallyFree": {
          "type": "bytes",
          "id": 3,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 4
        },
        "remainder": {
          "type": "Var",
          "id": 5
        }
      }
    },
    "ETuple": {
      "fields": {
        "ps": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "locallyFree": {
          "type": "bytes",
          "id": 3,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 4
        }
      }
    },
    "ESet": {
      "fields": {
        "ps": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        },
        "locallyFree": {
          "type": "bytes",
          "id": 3,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 4
        },
        "remainder": {
          "type": "Var",
          "id": 5
        }
      }
    },
    "EMap": {
      "fields": {
        "kvs": {
          "rule": "repeated",
          "type": "KeyValuePair",
          "id": 1
        },
        "locallyFree": {
          "type": "bytes",
          "id": 3,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 4
        },
        "remainder": {
          "type": "Var",
          "id": 5
        }
      }
    },
    "EMethod": {
      "fields": {
        "methodName": {
          "type": "string",
          "id": 1
        },
        "target": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "arguments": {
          "rule": "repeated",
          "type": "Par",
          "id": 3
        },
        "locallyFree": {
          "type": "bytes",
          "id": 5,
          "options": {
            "(scalapb.field).type": "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"
          }
        },
        "connective_used": {
          "type": "bool",
          "id": 6
        }
      }
    },
    "KeyValuePair": {
      "fields": {
        "key": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "value": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EVar": {
      "fields": {
        "v": {
          "type": "Var",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "ENot": {
      "fields": {
        "p": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "ENeg": {
      "fields": {
        "p": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EMult": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EDiv": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EPlus": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EMinus": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "ELt": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "ELte": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EGt": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EGte": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EEq": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "ENeq": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EAnd": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EOr": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EMatches": {
      "fields": {
        "target": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "pattern": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EPercentPercent": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EPlusPlus": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "EMinusMinus": {
      "fields": {
        "p1": {
          "type": "Par",
          "id": 1,
          "options": {
            "(scalapb.field).no_box": true
          }
        },
        "p2": {
          "type": "Par",
          "id": 2,
          "options": {
            "(scalapb.field).no_box": true
          }
        }
      }
    },
    "Connective": {
      "oneofs": {
        "connective_instance": {
          "oneof": [
            "conn_and_body",
            "conn_or_body",
            "conn_not_body",
            "var_ref_body",
            "conn_bool",
            "conn_int",
            "conn_string",
            "conn_uri",
            "conn_byte_array"
          ]
        }
      },
      "fields": {
        "conn_and_body": {
          "type": "ConnectiveBody",
          "id": 1
        },
        "conn_or_body": {
          "type": "ConnectiveBody",
          "id": 2
        },
        "conn_not_body": {
          "type": "Par",
          "id": 3
        },
        "var_ref_body": {
          "type": "VarRef",
          "id": 4
        },
        "conn_bool": {
          "type": "bool",
          "id": 5
        },
        "conn_int": {
          "type": "bool",
          "id": 6
        },
        "conn_string": {
          "type": "bool",
          "id": 7
        },
        "conn_uri": {
          "type": "bool",
          "id": 8
        },
        "conn_byte_array": {
          "type": "bool",
          "id": 9
        }
      }
    },
    "VarRef": {
      "fields": {
        "index": {
          "type": "sint32",
          "id": 1
        },
        "depth": {
          "type": "sint32",
          "id": 2
        }
      }
    },
    "ConnectiveBody": {
      "fields": {
        "ps": {
          "rule": "repeated",
          "type": "Par",
          "id": 1
        }
      }
    },
    "GPrivate": {
      "fields": {
        "id": {
          "type": "bytes",
          "id": 1
        }
      }
    }
  }
}