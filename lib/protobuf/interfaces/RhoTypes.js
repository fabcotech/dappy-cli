/**
 * Flowtype definitions for RhoTypes
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.3
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

interface IPar {
  sends?: ISend[];
  receives?: IReceive[];
  news?: INew[];
  exprs?: IExpr[];
  matches?: IMatch[];
  ids?: IGPrivate[];
  bundles?: IBundle[];
  connectives?: IConnective[];
  locallyFree?: Uint8Array;
  connective_used?: boolean;
}
declare export class Par implements IPar {
  constructor(properties?: IPar): this;
  sends: ISend[];
  receives: IReceive[];
  news: INew[];
  exprs: IExpr[];
  matches: IMatch[];
  ids: IGPrivate[];
  bundles: IBundle[];
  connectives: IConnective[];
  locallyFree: Uint8Array;
  connective_used: boolean;
  static create(properties?: IPar): Par;
  static encode(message: IPar, writer?: $protobuf.Writer): $protobuf.Writer;
  static encodeDelimited(message: IPar, writer?: $protobuf.Writer): $protobuf.Writer;
  static decode(reader: $protobuf.Reader | Uint8Array, length?: number): Par;
  static decodeDelimited(reader: $protobuf.Reader | Uint8Array): Par;
  static verify(message: {
    [k: string]: any
  }): string | null;
  static fromObject(object: {
    [k: string]: any
  }): Par;
  static toObject(
    message: Par,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  static toJSON(): {
    [k: string]: any
  };
}
interface ITaggedContinuation {
  par_body?: IParWithRandom | null;
  scala_body_ref?: number | Long;
}
declare export class TaggedContinuation implements ITaggedContinuation {
  constructor(properties?: ITaggedContinuation): this;
  par_body: IParWithRandom | null;
  scala_body_ref: number | Long;
  tagged_cont: "par_body" | "scala_body_ref";
  // ISSUE: create, encode, etc. in all these classes should be static.
  create(properties?: ITaggedContinuation): TaggedContinuation;
  encode(
    message: ITaggedContinuation,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  encodeDelimited(
    message: ITaggedContinuation,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): TaggedContinuation;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): TaggedContinuation;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): TaggedContinuation;
  toObject(
    message: TaggedContinuation,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IParWithRandom {
  body?: IPar | null;
  randomState?: Uint8Array;
}
declare export class ParWithRandom implements IParWithRandom {
  constructor(properties?: IParWithRandom): this;
  body: IPar | null;
  randomState: Uint8Array;
  create(properties?: IParWithRandom): ParWithRandom;
  encode(message: IParWithRandom, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IParWithRandom,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ParWithRandom;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ParWithRandom;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ParWithRandom;
  toObject(
    message: ParWithRandom,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IPCost {
  iterations?: number | null;
  cost?: number | Long | null;
}
declare export class PCost implements IPCost {
  constructor(properties?: IPCost): this;
  iterations: number | null;
  cost: number | Long;
  create(properties?: IPCost): PCost;
  encode(message: IPCost, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IPCost, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): PCost;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): PCost;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): PCost;
  toObject(
    message: PCost,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IListParWithRandom {
  pars?: IPar[] | null;
  randomState?: Uint8Array | null;
}
declare export class ListParWithRandom implements IListParWithRandom {
  constructor(properties?: IListParWithRandom): this;
  pars: IPar[] | null;
  randomState: Uint8Array;
  create(properties?: IListParWithRandom): ListParWithRandom;
  encode(
    message: IListParWithRandom,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  encodeDelimited(
    message: IListParWithRandom,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): ListParWithRandom;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ListParWithRandom;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ListParWithRandom;
  toObject(
    message: ListParWithRandom,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IListParWithRandomAndPhlos {
  pars?: IPar[] | null;
  randomState?: Uint8Array | null;
  cost?: number | Long | null;
}
declare export class ListParWithRandomAndPhlos
  implements IListParWithRandomAndPhlos {
  constructor(properties?: IListParWithRandomAndPhlos): this;
  pars: IPar[] | null;
  randomState: Uint8Array;
  cost: number | Long;
  create(properties?: IListParWithRandomAndPhlos): ListParWithRandomAndPhlos;
  encode(
    message: IListParWithRandomAndPhlos,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  encodeDelimited(
    message: IListParWithRandomAndPhlos,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): ListParWithRandomAndPhlos;
  decodeDelimited(
    reader: $protobuf.Reader | Uint8Array
  ): ListParWithRandomAndPhlos;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ListParWithRandomAndPhlos;
  toObject(
    message: ListParWithRandomAndPhlos,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IVar {
  bound_var?: number;
  free_var?: number;
  wildcard?: Var$IWildcardMsg | null;
}
declare export class Var implements IVar {
  constructor(properties?: IVar): this;
  bound_var: number;
  free_var: number;
  wildcard: Var$IWildcardMsg | null;
  var_instance: "bound_var" | "free_var" | "wildcard";
  create(properties?: IVar): Var;
  encode(message: IVar, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IVar, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Var;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Var;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Var;
  toObject(
    message: Var,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface Var$IWildcardMsg {}

declare class WildcardMsg implements IWildcardMsg {
  constructor(properties?: Var$IWildcardMsg): this;
  create(properties?: Var$IWildcardMsg): Var$WildcardMsg;
  encode(
    message: Var$IWildcardMsg,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  encodeDelimited(
    message: Var$IWildcardMsg,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): Var$WildcardMsg;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Var$WildcardMsg;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Var$WildcardMsg;
  toObject(
    message: Var$WildcardMsg,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IBundle {
  body?: IPar | null;
  writeFlag?: boolean | null;
  readFlag?: boolean | null;
}
declare export class Bundle implements IBundle {
  constructor(properties?: IBundle): this;
  body: IPar | null;
  writeFlag: boolean | null;
  readFlag: boolean | null;
  create(properties?: IBundle): Bundle;
  encode(message: IBundle, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IBundle,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Bundle;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Bundle;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Bundle;
  toObject(
    message: Bundle,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface ISend {
  chan?: IPar | null;
  data?: IPar[] | null;
  persistent?: boolean | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
}
declare export class Send implements ISend {
  constructor(properties?: ISend): this;
  chan: IPar | null;
  data: IPar[] | null;
  persistent: boolean | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  create(properties?: ISend): Send;
  encode(message: ISend, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: ISend, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Send;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Send;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Send;
  toObject(
    message: Send,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IReceiveBind {
  patterns?: IPar[] | null;
  source?: IPar | null;
  remainder?: IVar | null;
  freeCount?: number | null;
}
declare export class ReceiveBind implements IReceiveBind {
  constructor(properties?: IReceiveBind): this;
  patterns: IPar[] | null;
  source: IPar | null;
  remainder: IVar | null;
  freeCount: number | null;
  create(properties?: IReceiveBind): ReceiveBind;
  encode(message: IReceiveBind, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IReceiveBind,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ReceiveBind;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ReceiveBind;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ReceiveBind;
  toObject(
    message: ReceiveBind,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IBindPattern {
  patterns?: IPar[] | null;
  remainder?: IVar | null;
  freeCount?: number | null;
}
declare export class BindPattern implements IBindPattern {
  constructor(properties?: IBindPattern): this;
  patterns: IPar[] | null;
  remainder: IVar | null;
  freeCount: number | null;
  create(properties?: IBindPattern): BindPattern;
  encode(message: IBindPattern, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IBindPattern,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): BindPattern;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): BindPattern;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): BindPattern;
  toObject(
    message: BindPattern,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IListBindPatterns {
  patterns?: IBindPattern[] | null;
}
declare export class ListBindPatterns implements IListBindPatterns {
  constructor(properties?: IListBindPatterns): this;
  patterns: IBindPattern[] | null;
  create(properties?: IListBindPatterns): ListBindPatterns;
  encode(
    message: IListBindPatterns,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  encodeDelimited(
    message: IListBindPatterns,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): ListBindPatterns;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ListBindPatterns;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ListBindPatterns;
  toObject(
    message: ListBindPatterns,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IReceive {
  binds?: IReceiveBind[] | null;
  body?: IPar | null;
  persistent?: boolean | null;
  bindCount?: number | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
}
declare export class Receive implements IReceive {
  constructor(properties?: IReceive): this;
  binds: IReceiveBind[] | null;
  body: IPar | null;
  persistent: boolean | null;
  bindCount: number | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  create(properties?: IReceive): Receive;
  encode(message: IReceive, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IReceive,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Receive;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Receive;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Receive;
  toObject(
    message: Receive,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface INew {
  bindCount?: number | null;
  p?: IPar | null;
  uri?: string[] | null;
  locallyFree?: Uint8Array | null;
}
declare export class New implements INew {
  constructor(properties?: INew): this;
  bindCount: number | null;
  p: IPar | null;
  uri: string[] | null;
  locallyFree: Uint8Array;
  create(properties?: INew): New;
  encode(message: INew, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: INew, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): New;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): New;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): New;
  toObject(
    message: New,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IMatchCase {
  pattern?: IPar | null;
  source?: IPar | null;
  freeCount?: number | null;
}
declare export class MatchCase implements IMatchCase {
  constructor(properties?: IMatchCase): this;
  pattern: IPar | null;
  source: IPar | null;
  freeCount: number | null;
  create(properties?: IMatchCase): MatchCase;
  encode(message: IMatchCase, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IMatchCase,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): MatchCase;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): MatchCase;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): MatchCase;
  toObject(
    message: MatchCase,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IMatch {
  target?: IPar | null;
  cases?: IMatchCase[] | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
}
declare export class Match implements IMatch {
  constructor(properties?: IMatch): this;
  target: IPar | null;
  cases: IMatchCase[] | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  create(properties?: IMatch): Match;
  encode(message: IMatch, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IMatch, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Match;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Match;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Match;
  toObject(
    message: Match,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
export interface IExpr {
  g_bool?: boolean | null;
  g_int?: number | Long | null;
  g_string?: string | null;
  g_uri?: string | null;
  g_byte_array?: Uint8Array | null;
  e_not_body?: IENot | null;
  e_neg_body?: IENeg | null;
  e_mult_body?: IEMult | null;
  e_div_body?: IEDiv | null;
  e_plus_body?: IEPlus | null;
  e_minus_body?: IEMinus | null;
  e_lt_body?: IELt | null;
  e_lte_body?: IELte | null;
  e_gt_body?: IEGt | null;
  e_gte_body?: IEGte | null;
  e_eq_body?: IEEq | null;
  e_neq_body?: IENeq | null;
  e_and_body?: IEAnd | null;
  e_or_body?: IEOr | null;
  e_var_body?: IEVar | null;
  e_list_body?: IEList | null;
  e_tuple_body?: IETuple | null;
  e_set_body?: IESet | null;
  e_map_body?: IEMap | null;
  e_method_body?: IEMethod | null;
  e_matches_body?: IEMatches | null;
  e_percent_percent_body?: IEPercentPercent | null;
  e_plus_plus_body?: IEPlusPlus | null;
  e_minus_minus_body?: IEMinusMinus | null;
}
declare export class Expr implements IExpr {
  constructor(properties?: IExpr): this;
  g_bool: boolean | null;
  g_int: number | Long;
  g_string: string | null;
  g_uri: string | null;
  g_byte_array: Uint8Array;
  e_not_body: IENot | null;
  e_neg_body: IENeg | null;
  e_mult_body: IEMult | null;
  e_div_body: IEDiv | null;
  e_plus_body: IEPlus | null;
  e_minus_body: IEMinus | null;
  e_lt_body: IELt | null;
  e_lte_body: IELte | null;
  e_gt_body: IEGt | null;
  e_gte_body: IEGte | null;
  e_eq_body: IEEq | null;
  e_neq_body: IENeq | null;
  e_and_body: IEAnd | null;
  e_or_body: IEOr | null;
  e_var_body: IEVar | null;
  e_list_body: IEList | null;
  e_tuple_body: IETuple | null;
  e_set_body: IESet | null;
  e_map_body: IEMap | null;
  e_method_body: IEMethod | null;
  e_matches_body: IEMatches | null;
  e_percent_percent_body: IEPercentPercent | null;
  e_plus_plus_body: IEPlusPlus | null;
  e_minus_minus_body: IEMinusMinus | null;
  expr_instance:
    | "g_bool"
    | "g_int"
    | "g_string"
    | "g_uri"
    | "g_byte_array"
    | "e_not_body"
    | "e_neg_body"
    | "e_mult_body"
    | "e_div_body"
    | "e_plus_body"
    | "e_minus_body"
    | "e_lt_body"
    | "e_lte_body"
    | "e_gt_body"
    | "e_gte_body"
    | "e_eq_body"
    | "e_neq_body"
    | "e_and_body"
    | "e_or_body"
    | "e_var_body"
    | "e_list_body"
    | "e_tuple_body"
    | "e_set_body"
    | "e_map_body"
    | "e_method_body"
    | "e_matches_body"
    | "e_percent_percent_body"
    | "e_plus_plus_body"
    | "e_minus_minus_body";
  create(properties?: IExpr): Expr;
  encode(message: IExpr, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IExpr, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Expr;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Expr;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Expr;
  toObject(
    message: Expr,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEList {
  ps?: IPar[] | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
  remainder?: IVar | null;
}
declare export class EList implements IEList {
  constructor(properties?: IEList): this;
  ps: IPar[] | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  remainder: IVar | null;
  create(properties?: IEList): EList;
  encode(message: IEList, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEList, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EList;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EList;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EList;
  toObject(
    message: EList,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IETuple {
  ps?: IPar[] | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
}
declare export class ETuple implements IETuple {
  constructor(properties?: IETuple): this;
  ps: IPar[] | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  create(properties?: IETuple): ETuple;
  encode(message: IETuple, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IETuple,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ETuple;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ETuple;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ETuple;
  toObject(
    message: ETuple,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IESet {
  ps?: IPar[] | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
  remainder?: IVar | null;
}
declare export class ESet implements IESet {
  constructor(properties?: IESet): this;
  ps: IPar[] | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  remainder: IVar | null;
  create(properties?: IESet): ESet;
  encode(message: IESet, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IESet, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ESet;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ESet;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ESet;
  toObject(
    message: ESet,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEMap {
  kvs?: IKeyValuePair[] | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
  remainder?: IVar | null;
}
declare export class EMap implements IEMap {
  constructor(properties?: IEMap): this;
  kvs: IKeyValuePair[] | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  remainder: IVar | null;
  create(properties?: IEMap): EMap;
  encode(message: IEMap, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEMap, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EMap;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EMap;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EMap;
  toObject(
    message: EMap,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEMethod {
  methodName?: string | null;
  target?: IPar | null;
  arguments?: IPar[] | null;
  locallyFree?: Uint8Array | null;
  connective_used?: boolean | null;
}
declare export class EMethod implements IEMethod {
  constructor(properties?: IEMethod): this;
  methodName: string | null;
  target: IPar | null;
  arguments: IPar[] | null;
  locallyFree: Uint8Array;
  connective_used: boolean | null;
  create(properties?: IEMethod): EMethod;
  encode(message: IEMethod, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IEMethod,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EMethod;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EMethod;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EMethod;
  toObject(
    message: EMethod,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IKeyValuePair {
  key?: IPar | null;
  value?: IPar | null;
}
declare export class KeyValuePair implements IKeyValuePair {
  constructor(properties?: IKeyValuePair): this;
  key: IPar | null;
  value: IPar | null;
  create(properties?: IKeyValuePair): KeyValuePair;
  encode(message: IKeyValuePair, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IKeyValuePair,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): KeyValuePair;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): KeyValuePair;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): KeyValuePair;
  toObject(
    message: KeyValuePair,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEVar {
  v?: IVar | null;
}
declare export class EVar implements IEVar {
  constructor(properties?: IEVar): this;
  v: IVar | null;
  create(properties?: IEVar): EVar;
  encode(message: IEVar, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEVar, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EVar;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EVar;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EVar;
  toObject(
    message: EVar,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IENot {
  p?: IPar | null;
}
declare export class ENot implements IENot {
  constructor(properties?: IENot): this;
  p: IPar | null;
  create(properties?: IENot): ENot;
  encode(message: IENot, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IENot, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ENot;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ENot;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ENot;
  toObject(
    message: ENot,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IENeg {
  p?: IPar | null;
}
declare export class ENeg implements IENeg {
  constructor(properties?: IENeg): this;
  p: IPar | null;
  create(properties?: IENeg): ENeg;
  encode(message: IENeg, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IENeg, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ENeg;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ENeg;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ENeg;
  toObject(
    message: ENeg,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEMult {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EMult implements IEMult {
  constructor(properties?: IEMult): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEMult): EMult;
  encode(message: IEMult, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEMult, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EMult;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EMult;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EMult;
  toObject(
    message: EMult,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEDiv {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EDiv implements IEDiv {
  constructor(properties?: IEDiv): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEDiv): EDiv;
  encode(message: IEDiv, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEDiv, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EDiv;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EDiv;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EDiv;
  toObject(
    message: EDiv,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEPlus {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EPlus implements IEPlus {
  constructor(properties?: IEPlus): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEPlus): EPlus;
  encode(message: IEPlus, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEPlus, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EPlus;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EPlus;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EPlus;
  toObject(
    message: EPlus,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEMinus {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EMinus implements IEMinus {
  constructor(properties?: IEMinus): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEMinus): EMinus;
  encode(message: IEMinus, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IEMinus,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EMinus;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EMinus;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EMinus;
  toObject(
    message: EMinus,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IELt {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class ELt implements IELt {
  constructor(properties?: IELt): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IELt): ELt;
  encode(message: IELt, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IELt, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ELt;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ELt;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ELt;
  toObject(
    message: ELt,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IELte {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class ELte implements IELte {
  constructor(properties?: IELte): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IELte): ELte;
  encode(message: IELte, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IELte, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ELte;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ELte;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ELte;
  toObject(
    message: ELte,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEGt {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EGt implements IEGt {
  constructor(properties?: IEGt): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEGt): EGt;
  encode(message: IEGt, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEGt, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EGt;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EGt;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EGt;
  toObject(
    message: EGt,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEGte {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EGte implements IEGte {
  constructor(properties?: IEGte): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEGte): EGte;
  encode(message: IEGte, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEGte, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EGte;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EGte;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EGte;
  toObject(
    message: EGte,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEEq {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EEq implements IEEq {
  constructor(properties?: IEEq): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEEq): EEq;
  encode(message: IEEq, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEEq, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EEq;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EEq;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EEq;
  toObject(
    message: EEq,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IENeq {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class ENeq implements IENeq {
  constructor(properties?: IENeq): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IENeq): ENeq;
  encode(message: IENeq, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IENeq, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): ENeq;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ENeq;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ENeq;
  toObject(
    message: ENeq,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEAnd {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EAnd implements IEAnd {
  constructor(properties?: IEAnd): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEAnd): EAnd;
  encode(message: IEAnd, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEAnd, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EAnd;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EAnd;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EAnd;
  toObject(
    message: EAnd,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEOr {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EOr implements IEOr {
  constructor(properties?: IEOr): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEOr): EOr;
  encode(message: IEOr, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(message: IEOr, writer?: $protobuf.Writer): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EOr;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EOr;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EOr;
  toObject(
    message: EOr,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEMatches {
  target?: IPar | null;
  pattern?: IPar | null;
}
declare export class EMatches implements IEMatches {
  constructor(properties?: IEMatches): this;
  target: IPar | null;
  pattern: IPar | null;
  create(properties?: IEMatches): EMatches;
  encode(message: IEMatches, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IEMatches,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EMatches;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EMatches;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EMatches;
  toObject(
    message: EMatches,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEPercentPercent {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EPercentPercent implements IEPercentPercent {
  constructor(properties?: IEPercentPercent): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEPercentPercent): EPercentPercent;
  encode(
    message: IEPercentPercent,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  encodeDelimited(
    message: IEPercentPercent,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): EPercentPercent;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EPercentPercent;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EPercentPercent;
  toObject(
    message: EPercentPercent,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEPlusPlus {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EPlusPlus implements IEPlusPlus {
  constructor(properties?: IEPlusPlus): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEPlusPlus): EPlusPlus;
  encode(message: IEPlusPlus, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IEPlusPlus,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EPlusPlus;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EPlusPlus;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EPlusPlus;
  toObject(
    message: EPlusPlus,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IEMinusMinus {
  p1?: IPar | null;
  p2?: IPar | null;
}
declare export class EMinusMinus implements IEMinusMinus {
  constructor(properties?: IEMinusMinus): this;
  p1: IPar | null;
  p2: IPar | null;
  create(properties?: IEMinusMinus): EMinusMinus;
  encode(message: IEMinusMinus, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IEMinusMinus,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): EMinusMinus;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): EMinusMinus;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): EMinusMinus;
  toObject(
    message: EMinusMinus,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IConnective {
  conn_and_body?: IConnectiveBody | null;
  conn_or_body?: IConnectiveBody | null;
  conn_not_body?: IPar | null;
  var_ref_body?: IVarRef | null;
  conn_bool?: boolean | null;
  conn_int?: boolean | null;
  conn_string?: boolean | null;
  conn_uri?: boolean | null;
  conn_byte_array?: boolean | null;
}
declare export class Connective implements IConnective {
  constructor(properties?: IConnective): this;
  conn_and_body: IConnectiveBody | null;
  conn_or_body: IConnectiveBody | null;
  conn_not_body: IPar | null;
  var_ref_body: IVarRef | null;
  conn_bool: boolean | null;
  conn_int: boolean | null;
  conn_string: boolean | null;
  conn_uri: boolean | null;
  conn_byte_array: boolean | null;
  connective_instance:
    | "conn_and_body"
    | "conn_or_body"
    | "conn_not_body"
    | "var_ref_body"
    | "conn_bool"
    | "conn_int"
    | "conn_string"
    | "conn_uri"
    | "conn_byte_array";
  create(properties?: IConnective): Connective;
  encode(message: IConnective, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IConnective,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): Connective;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): Connective;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): Connective;
  toObject(
    message: Connective,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IVarRef {
  index?: number | null;
  depth?: number | null;
}
declare export class VarRef implements IVarRef {
  constructor(properties?: IVarRef): this;
  index: number | null;
  depth: number | null;
  create(properties?: IVarRef): VarRef;
  encode(message: IVarRef, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IVarRef,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): VarRef;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): VarRef;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): VarRef;
  toObject(
    message: VarRef,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IConnectiveBody {
  ps?: IPar[] | null;
}
declare export class ConnectiveBody implements IConnectiveBody {
  constructor(properties?: IConnectiveBody): this;
  ps: IPar[] | null;
  create(properties?: IConnectiveBody): ConnectiveBody;
  encode(message: IConnectiveBody, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IConnectiveBody,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(
    reader: $protobuf.Reader | Uint8Array,
    length?: number
  ): ConnectiveBody;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): ConnectiveBody;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): ConnectiveBody;
  toObject(
    message: ConnectiveBody,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
interface IGPrivate {
  id?: Uint8Array | null;
}
declare export class GPrivate implements IGPrivate {
  constructor(properties?: IGPrivate): this;
  id: Uint8Array;
  create(properties?: IGPrivate): GPrivate;
  encode(message: IGPrivate, writer?: $protobuf.Writer): $protobuf.Writer;
  encodeDelimited(
    message: IGPrivate,
    writer?: $protobuf.Writer
  ): $protobuf.Writer;
  decode(reader: $protobuf.Reader | Uint8Array, length?: number): GPrivate;
  decodeDelimited(reader: $protobuf.Reader | Uint8Array): GPrivate;
  verify(message: {
    [k: string]: any
  }): string | null;
  fromObject(object: {
    [k: string]: any
  }): GPrivate;
  toObject(
    message: GPrivate,
    options?: $protobuf.IConversionOptions
  ): {
    [k: string]: any
  };
  toJSON(): {
    [k: string]: any
  };
}
