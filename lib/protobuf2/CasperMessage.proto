/**
 * The main API is `DeployService`.
 */
syntax = "proto3";
package coop.rchain.casper.protocol;

import "google/protobuf/empty.proto";

// If you are building for other languages "scalapb.proto"
// can be manually obtained here:
// https://raw.githubusercontent.com/scalapb/ScalaPB/master/protobuf/scalapb/scalapb.proto
// make a scalapb directory in this file's location and place it inside

import "scalapb/scalapb.proto";
import "RhoTypes.proto";
import "Either.proto";

option (scalapb.options) = {
  package_name: "coop.rchain.casper.protocol"
  flat_package: true
  single_file: true
  preamble: "sealed trait CasperMessage"
};


message BlockRequest {
  option (scalapb.message).extends = "CasperMessage";
  //Fields are redundant to allow for validity check.
  //Such a check can definitively distinguish this
  //from other message types with similar serializations.
  string base16Hash = 1;
  bytes  hash       = 2;
}

message ForkChoiceTipRequest {
  option (scalapb.message).extends = "CasperMessage";
}

// ---------- Signing Protocol ---------
message ApprovedBlockCandidate {
  BlockMessage block        = 1;
  int32        requiredSigs = 2;
}

message UnapprovedBlock {
  option (scalapb.message).extends = "CasperMessage";
  ApprovedBlockCandidate candidate = 1;
  int64                  timestamp = 2;
  int64                  duration  = 3;
}

message Signature {
  bytes  publicKey = 1;
  string algorithm = 2;
  bytes  sig       = 3;
}

message BlockApproval {
  option (scalapb.message).extends = "CasperMessage";
  ApprovedBlockCandidate candidate = 1;
  Signature              sig       = 2;
}

message ApprovedBlock  {
  option (scalapb.message).extends = "CasperMessage";
  ApprovedBlockCandidate candidate = 1;
  repeated Signature     sigs      = 2;
}

message ApprovedBlockRequest {
  option (scalapb.message).extends = "CasperMessage";
  string identifier = 1;
}

message NoApprovedBlockAvailable {
  option (scalapb.message).extends = "CasperMessage";
  string identifier = 1;
  string nodeIdentifer = 2;
}

// ------- End Signing Protocol --------

// --------- Core Protocol  --------
message BlockMessage {
  option (scalapb.message).extends = "CasperMessage";  
  bytes                  blockHash      = 1; // obtained by hashing the information in the header
  Header                 header         = 2;
  Body                   body           = 3;
  repeated Justification justifications = 4; // map of all validators to latest blocks based on current view
  bytes                  sender         = 5; // public key of the validator that created the block
  int32                  seqNum         = 6; // number of blocks created by the validator
  bytes                  sig            = 7; // signature generated by signing `hash(hash(justification) concat blockHash)`.
  string                 sigAlgorithm   = 8; // name of the algorithm used to sign
  string                 shardId        = 9; // identifier of the shard where the block was created
  bytes extraBytes = 10;
}

message BlockMetadataInternal {
  // This message in mapped to a different Scala class because of protobuf's inability to create map<bytes, int64> for
  // bonds.
  option (scalapb.message).type = "coop.rchain.models.BlockMetadata";

  bytes blockHash                       = 1;
  repeated bytes parents                = 2 [(scalapb.field).collection_type="collection.immutable.List"];
  bytes sender                          = 3;
  repeated Justification justifications = 4 [(scalapb.field).collection_type="collection.immutable.List"];
  repeated Bond bonds                   = 5 [(scalapb.field).collection_type="collection.immutable.List"];
  int64 blockNum                        = 6;
  int32 seqNum                          = 7;
  bool invalid                          = 8; // whether the block was marked as invalid
}

message Header {
  repeated bytes parentsHashList = 1; //list of parent block hashes
  bytes postStateHash      = 2;
  bytes deploysHash        = 3;
  int64 timestamp = 5;
  int64 version = 6;
  int32 deployCount = 7;
  bytes extraBytes = 8;
}

/**
 * Note: deploys are uniquely keyed by `user`, `timestamp`.
 *
 * **TODO**: details of signatures and payment. See RHOL-781
 */
message DeployData {
  bytes  deployer     = 1; //public key
  string term         = 2; //rholang source code to deploy (will be parsed into `Par`)
  int64  timestamp    = 3; //millisecond timestamp
  bytes  sig          = 4; //signature of (hash(term) + timestamp) using private key
  string sigAlgorithm = 5; //name of the algorithm used to sign
  int64 phloPrice     = 7; //phlo price
  int64 phloLimit     = 8; //phlo limit for the deployment
  int64 validAfterBlockNumber = 10;
}

message ProcessedDeploy {
    DeployData deploy = 1;
    PCost cost = 2 ;
    repeated Event deployLog = 3; //the new terms and comm. rule reductions from this deploy
    repeated Event paymentLog = 4; //the comm. rule reductions from the payment for the deploy
    bool errored = 5; //true if deploy encountered a user error
}

message Body {
  RChainState              state    = 1;
  repeated ProcessedDeploy deploys      = 2;
  bytes                    extraBytes   = 3;
}

message Justification {
  bytes validator       = 1;
  bytes latestBlockHash = 2;
}

message RChainState {
  bytes preStateHash = 1; //hash of the tuplespace contents before new deploys
  bytes postStateHash = 2; //hash of the tuplespace contents after new deploys

  //Internals of what will be the "blessed" PoS contract
  //(which will be part of the tuplespace in the real implementation).
  repeated Bond bonds        = 3;
  int64         blockNumber  = 4;
}

message Event {
  oneof event_instance {
    ProduceEvent produce = 1;
    ConsumeEvent consume = 2;
    CommEvent comm = 3;
  }
}

message ProduceEvent {
  bytes channelsHash = 1;
  bytes hash = 2;
  int32 sequenceNumber = 3;
}

message ConsumeEvent {
  repeated bytes channelsHashes = 1;
  bytes hash = 2;
  int32 sequenceNumber = 3;
}

message CommEvent {
  ConsumeEvent consume = 1;
  repeated ProduceEvent produces = 2;
}

message Bond {
  bytes validator = 1;
  int64 stake     = 2;
}
// --------- End Core Protocol  --------
